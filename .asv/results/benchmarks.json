{
    "benchmarks.TimeRaggedArraySuite.time_concatenate_np": {
        "code": "class TimeRaggedArraySuite:\n    def time_concatenate_np(self):\n        np.concatenate((self.matrix, self.matrix2), axis=0)\n\n    def setup(self):\n        np.random.seed(1)\n        self.matrix = np.random.randint(0, 1000, (1000, 1000), dtype=int)\n        self.matrix2 = np.random.randint(0, 1000, (500, 1000), dtype=int)\n        self.ragged_array = RaggedArray.from_numpy_array(self.matrix)\n        self.ragged_array2 = RaggedArray.from_numpy_array(self.matrix2)\n        self.indexes = np.random.randint(0, 1000, 1000)",
        "min_run_count": 2,
        "name": "benchmarks.TimeRaggedArraySuite.time_concatenate_np",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "bd98e8505273fda895774a98c58c38ae6fcd8a616f3eeec42994bbafd0d2792f",
        "warmup_time": -1
    },
    "benchmarks.TimeRaggedArraySuite.time_concatenate_nps": {
        "code": "class TimeRaggedArraySuite:\n    def time_concatenate_nps(self):\n        np.concatenate((self.ragged_array, self.ragged_array2), axis=0)\n\n    def setup(self):\n        np.random.seed(1)\n        self.matrix = np.random.randint(0, 1000, (1000, 1000), dtype=int)\n        self.matrix2 = np.random.randint(0, 1000, (500, 1000), dtype=int)\n        self.ragged_array = RaggedArray.from_numpy_array(self.matrix)\n        self.ragged_array2 = RaggedArray.from_numpy_array(self.matrix2)\n        self.indexes = np.random.randint(0, 1000, 1000)",
        "min_run_count": 2,
        "name": "benchmarks.TimeRaggedArraySuite.time_concatenate_nps",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "5a5ebc48c63becf21f8bf7618f188fa9d8886da4c24f7411bba4fc875a2935b7",
        "warmup_time": -1
    },
    "benchmarks.TimeRaggedArraySuite.time_np_col_sum": {
        "code": "class TimeRaggedArraySuite:\n    def time_np_col_sum(self):\n        self.matrix.sum(axis=0)\n\n    def setup(self):\n        np.random.seed(1)\n        self.matrix = np.random.randint(0, 1000, (1000, 1000), dtype=int)\n        self.matrix2 = np.random.randint(0, 1000, (500, 1000), dtype=int)\n        self.ragged_array = RaggedArray.from_numpy_array(self.matrix)\n        self.ragged_array2 = RaggedArray.from_numpy_array(self.matrix2)\n        self.indexes = np.random.randint(0, 1000, 1000)",
        "min_run_count": 2,
        "name": "benchmarks.TimeRaggedArraySuite.time_np_col_sum",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "d0afbeec277a654247fb92c394327fed6693610de43e0b0ca0cc0f86663aede7",
        "warmup_time": -1
    },
    "benchmarks.TimeRaggedArraySuite.time_np_getitem_col": {
        "code": "class TimeRaggedArraySuite:\n    def time_np_getitem_col(self):\n        return self.matrix[:, 1:-1].flatten()\n\n    def setup(self):\n        np.random.seed(1)\n        self.matrix = np.random.randint(0, 1000, (1000, 1000), dtype=int)\n        self.matrix2 = np.random.randint(0, 1000, (500, 1000), dtype=int)\n        self.ragged_array = RaggedArray.from_numpy_array(self.matrix)\n        self.ragged_array2 = RaggedArray.from_numpy_array(self.matrix2)\n        self.indexes = np.random.randint(0, 1000, 1000)",
        "min_run_count": 2,
        "name": "benchmarks.TimeRaggedArraySuite.time_np_getitem_col",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "8f543f2f0dae2b069342a1c25284741af1211d2837cb3cc514edea2409b659bf",
        "warmup_time": -1
    },
    "benchmarks.TimeRaggedArraySuite.time_np_getitem_row": {
        "code": "class TimeRaggedArraySuite:\n    def time_np_getitem_row(self):\n        return self.matrix[self.indexes].flatten()\n\n    def setup(self):\n        np.random.seed(1)\n        self.matrix = np.random.randint(0, 1000, (1000, 1000), dtype=int)\n        self.matrix2 = np.random.randint(0, 1000, (500, 1000), dtype=int)\n        self.ragged_array = RaggedArray.from_numpy_array(self.matrix)\n        self.ragged_array2 = RaggedArray.from_numpy_array(self.matrix2)\n        self.indexes = np.random.randint(0, 1000, 1000)",
        "min_run_count": 2,
        "name": "benchmarks.TimeRaggedArraySuite.time_np_getitem_row",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "74317d7b11232f58cb529bdc283af9e72b3982ebfe5b8ec160963309d140d58e",
        "warmup_time": -1
    },
    "benchmarks.TimeRaggedArraySuite.time_np_row_mean": {
        "code": "class TimeRaggedArraySuite:\n    def time_np_row_mean(self):\n        self.matrix.mean(axis=-1)\n\n    def setup(self):\n        np.random.seed(1)\n        self.matrix = np.random.randint(0, 1000, (1000, 1000), dtype=int)\n        self.matrix2 = np.random.randint(0, 1000, (500, 1000), dtype=int)\n        self.ragged_array = RaggedArray.from_numpy_array(self.matrix)\n        self.ragged_array2 = RaggedArray.from_numpy_array(self.matrix2)\n        self.indexes = np.random.randint(0, 1000, 1000)",
        "min_run_count": 2,
        "name": "benchmarks.TimeRaggedArraySuite.time_np_row_mean",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "340a7028ff54e4e147bfbc203a0ad55b96ee84b3ab32a96f33a177ad1ce2fc7d",
        "warmup_time": -1
    },
    "benchmarks.TimeRaggedArraySuite.time_np_row_std": {
        "code": "class TimeRaggedArraySuite:\n    def time_np_row_std(self):\n        self.matrix.std(axis=-1)\n\n    def setup(self):\n        np.random.seed(1)\n        self.matrix = np.random.randint(0, 1000, (1000, 1000), dtype=int)\n        self.matrix2 = np.random.randint(0, 1000, (500, 1000), dtype=int)\n        self.ragged_array = RaggedArray.from_numpy_array(self.matrix)\n        self.ragged_array2 = RaggedArray.from_numpy_array(self.matrix2)\n        self.indexes = np.random.randint(0, 1000, 1000)",
        "min_run_count": 2,
        "name": "benchmarks.TimeRaggedArraySuite.time_np_row_std",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "7214da8fee20525ac5ad60e26835d9f7c006318adcb0c3d4c3b2071f3dcd9674",
        "warmup_time": -1
    },
    "benchmarks.TimeRaggedArraySuite.time_np_row_sum": {
        "code": "class TimeRaggedArraySuite:\n    def time_np_row_sum(self):\n        self.matrix.sum(axis=-1)\n\n    def setup(self):\n        np.random.seed(1)\n        self.matrix = np.random.randint(0, 1000, (1000, 1000), dtype=int)\n        self.matrix2 = np.random.randint(0, 1000, (500, 1000), dtype=int)\n        self.ragged_array = RaggedArray.from_numpy_array(self.matrix)\n        self.ragged_array2 = RaggedArray.from_numpy_array(self.matrix2)\n        self.indexes = np.random.randint(0, 1000, 1000)",
        "min_run_count": 2,
        "name": "benchmarks.TimeRaggedArraySuite.time_np_row_sum",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "e61a31a404ab2dac9c85351a17c4fe46baca9ecb83614c32e2e1a16f0a176669",
        "warmup_time": -1
    },
    "benchmarks.TimeRaggedArraySuite.time_np_square": {
        "code": "class TimeRaggedArraySuite:\n    def time_np_square(self):\n        self.matrix ** 2\n\n    def setup(self):\n        np.random.seed(1)\n        self.matrix = np.random.randint(0, 1000, (1000, 1000), dtype=int)\n        self.matrix2 = np.random.randint(0, 1000, (500, 1000), dtype=int)\n        self.ragged_array = RaggedArray.from_numpy_array(self.matrix)\n        self.ragged_array2 = RaggedArray.from_numpy_array(self.matrix2)\n        self.indexes = np.random.randint(0, 1000, 1000)",
        "min_run_count": 2,
        "name": "benchmarks.TimeRaggedArraySuite.time_np_square",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "382665632eeb8458c739ac0a4a1cfa890b4a4dfebab5102f3eab75927c6cf0c7",
        "warmup_time": -1
    },
    "benchmarks.TimeRaggedArraySuite.time_nps_col_sum": {
        "code": "class TimeRaggedArraySuite:\n    def time_nps_col_sum(self):\n        self.ragged_array.sum(axis=0)\n\n    def setup(self):\n        np.random.seed(1)\n        self.matrix = np.random.randint(0, 1000, (1000, 1000), dtype=int)\n        self.matrix2 = np.random.randint(0, 1000, (500, 1000), dtype=int)\n        self.ragged_array = RaggedArray.from_numpy_array(self.matrix)\n        self.ragged_array2 = RaggedArray.from_numpy_array(self.matrix2)\n        self.indexes = np.random.randint(0, 1000, 1000)",
        "min_run_count": 2,
        "name": "benchmarks.TimeRaggedArraySuite.time_nps_col_sum",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "cef01915b8564c59b341e63ce0a20a2579774586f3b27bd11315c5a82a086376",
        "warmup_time": -1
    },
    "benchmarks.TimeRaggedArraySuite.time_nps_getitem_col": {
        "code": "class TimeRaggedArraySuite:\n    def time_nps_getitem_col(self):\n        return self.ragged_array[:, 1:-1 ].ravel()\n\n    def setup(self):\n        np.random.seed(1)\n        self.matrix = np.random.randint(0, 1000, (1000, 1000), dtype=int)\n        self.matrix2 = np.random.randint(0, 1000, (500, 1000), dtype=int)\n        self.ragged_array = RaggedArray.from_numpy_array(self.matrix)\n        self.ragged_array2 = RaggedArray.from_numpy_array(self.matrix2)\n        self.indexes = np.random.randint(0, 1000, 1000)",
        "min_run_count": 2,
        "name": "benchmarks.TimeRaggedArraySuite.time_nps_getitem_col",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "3d315c61f7649fee20ee68364f9abd3da7aa5cf842b6cd3b4719c6301a017b7a",
        "warmup_time": -1
    },
    "benchmarks.TimeRaggedArraySuite.time_nps_getitem_row": {
        "code": "class TimeRaggedArraySuite:\n    def time_nps_getitem_row(self):\n        return self.ragged_array[self.indexes].ravel()\n\n    def setup(self):\n        np.random.seed(1)\n        self.matrix = np.random.randint(0, 1000, (1000, 1000), dtype=int)\n        self.matrix2 = np.random.randint(0, 1000, (500, 1000), dtype=int)\n        self.ragged_array = RaggedArray.from_numpy_array(self.matrix)\n        self.ragged_array2 = RaggedArray.from_numpy_array(self.matrix2)\n        self.indexes = np.random.randint(0, 1000, 1000)",
        "min_run_count": 2,
        "name": "benchmarks.TimeRaggedArraySuite.time_nps_getitem_row",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "01f31e60316d8c17e4ab186b1d7bfb8488ff51dc95b672b3d0611668a01828ad",
        "warmup_time": -1
    },
    "benchmarks.TimeRaggedArraySuite.time_nps_row_mean": {
        "code": "class TimeRaggedArraySuite:\n    def time_nps_row_mean(self):\n        self.ragged_array.mean(axis=-1)\n\n    def setup(self):\n        np.random.seed(1)\n        self.matrix = np.random.randint(0, 1000, (1000, 1000), dtype=int)\n        self.matrix2 = np.random.randint(0, 1000, (500, 1000), dtype=int)\n        self.ragged_array = RaggedArray.from_numpy_array(self.matrix)\n        self.ragged_array2 = RaggedArray.from_numpy_array(self.matrix2)\n        self.indexes = np.random.randint(0, 1000, 1000)",
        "min_run_count": 2,
        "name": "benchmarks.TimeRaggedArraySuite.time_nps_row_mean",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "773a681678944253e592496f8ca6392993c0a7a44fbb80159d743197612b2ffb",
        "warmup_time": -1
    },
    "benchmarks.TimeRaggedArraySuite.time_nps_row_std": {
        "code": "class TimeRaggedArraySuite:\n    def time_nps_row_std(self):\n        self.ragged_array.std(axis=-1)\n\n    def setup(self):\n        np.random.seed(1)\n        self.matrix = np.random.randint(0, 1000, (1000, 1000), dtype=int)\n        self.matrix2 = np.random.randint(0, 1000, (500, 1000), dtype=int)\n        self.ragged_array = RaggedArray.from_numpy_array(self.matrix)\n        self.ragged_array2 = RaggedArray.from_numpy_array(self.matrix2)\n        self.indexes = np.random.randint(0, 1000, 1000)",
        "min_run_count": 2,
        "name": "benchmarks.TimeRaggedArraySuite.time_nps_row_std",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "e4b3980bdab9f0feef9723617759a7770e826422455edf0b55b85f1137211da9",
        "warmup_time": -1
    },
    "benchmarks.TimeRaggedArraySuite.time_nps_row_sum": {
        "code": "class TimeRaggedArraySuite:\n    def time_nps_row_sum(self):\n        self.ragged_array.sum(axis=-1)\n\n    def setup(self):\n        np.random.seed(1)\n        self.matrix = np.random.randint(0, 1000, (1000, 1000), dtype=int)\n        self.matrix2 = np.random.randint(0, 1000, (500, 1000), dtype=int)\n        self.ragged_array = RaggedArray.from_numpy_array(self.matrix)\n        self.ragged_array2 = RaggedArray.from_numpy_array(self.matrix2)\n        self.indexes = np.random.randint(0, 1000, 1000)",
        "min_run_count": 2,
        "name": "benchmarks.TimeRaggedArraySuite.time_nps_row_sum",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "c911a24036bed60996dc4eb4b5c4d1f8b7cde05f1a9c92ba6082a8568e594a48",
        "warmup_time": -1
    },
    "benchmarks.TimeRaggedArraySuite.time_nps_square": {
        "code": "class TimeRaggedArraySuite:\n    def time_nps_square(self):\n        self.ragged_array ** 2\n\n    def setup(self):\n        np.random.seed(1)\n        self.matrix = np.random.randint(0, 1000, (1000, 1000), dtype=int)\n        self.matrix2 = np.random.randint(0, 1000, (500, 1000), dtype=int)\n        self.ragged_array = RaggedArray.from_numpy_array(self.matrix)\n        self.ragged_array2 = RaggedArray.from_numpy_array(self.matrix2)\n        self.indexes = np.random.randint(0, 1000, 1000)",
        "min_run_count": 2,
        "name": "benchmarks.TimeRaggedArraySuite.time_nps_square",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "84df683c4b45532e03d3b34e7f398e9a8ea2e52022bb27d9c95a507acb5f43be",
        "warmup_time": -1
    },
    "version": 2
}