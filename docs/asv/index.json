{"project": "project", "project_url": "https://github.com/npstructures", "show_commit_url": "http://github.com/bionumpy/npstructures/commit/", "hash_length": 8, "revision_to_hash": {"222": "e73e4de6abf6943079a278669ee3fff0d3c02b36", "342": "4f01c203140b5a99d530a82377b7ce928b2c5466", "350": "c69ba0e89804663e8095956ae3b84ca5085ad6eb", "354": "c25f7e26ed6a435ea5954394328aab32d4754788", "364": "3332444c14815ca0494628e647d3d1264b1a96b4", "381": "97d0c04168acefa678e71afde306de7d53ee9b39", "424": "878965dd9f7b2e2f145c0f03bad005f798b13c07", "430": "6883d6c3b872bbab71c3beb76b2e46f379b32811", "480": "791c7211ca810183bed68fd4c7fe17be7e64ed1c", "488": "024c009bde540892a002ade9226997ee3552afc1", "498": "339b06ca119864dcdd7bac513d0f5a37fa9a95c0", "501": "c7a4f91cbf1548b8004fed382dea8cb31212f078", "509": "d12dcac5ddc1dfb636bb71342d32e3cce7e66cd5", "514": "c3b9eef8fec8eed8f4a482540b55a5624671d22f", "518": "0c17ec81543539512c8153b5382444bdcc0a570c", "526": "5242e557c6cb917be07933f32a2c6a0884120bed", "552": "70943672f5ac6f6905c6811dd350c286af9b69e4", "556": "f253acbcfb4da1a7e816b71181a88870aaa162ce", "559": "702d53511c4c10cfb77b55e4a5db166979db740e", "570": "601defa54e927fe53e06cca70f3d75fa2d3f139e", "576": "032f209e302d5a0732e87d5f11d40eed2a5d4dc7"}, "revision_to_date": {"222": 1655469804000, "342": 1667831272000, "350": 1667835750000, "354": 1667836348000, "364": 1669376625000, "381": 1670342250000, "424": 1671549924000, "430": 1673616320000, "480": 1677931375000, "488": 1681813958000, "498": 1698238416000, "501": 1699006256000, "509": 1701870630000, "514": 1706797933000, "518": 1709714053000, "526": 1714475206000, "552": 1714482344000, "556": 1714482569000, "559": 1714482683000, "570": 1714483379000, "576": 1714723991000}, "params": {"machine": ["github_actions"], "python": ["3.10"], "branch": ["dev"]}, "graph_param_list": [{"machine": "github_actions", "python": "3.10", "branch": "dev"}], "benchmarks": {"benchmarks.TimeRaggedArraySuite.time_concatenate_np": {"code": "class TimeRaggedArraySuite:\n    def time_concatenate_np(self):\n        np.concatenate((self.matrix, self.matrix2), axis=0)\n\n    def setup(self):\n        np.random.seed(1)\n        self.matrix = np.random.randint(0, 1000, (1000, 1000), dtype=int)\n        self.matrix2 = np.random.randint(0, 1000, (500, 1000), dtype=int)\n        self.ragged_array = RaggedArray.from_numpy_array(self.matrix)\n        self.ragged_array2 = RaggedArray.from_numpy_array(self.matrix2)\n        self.indexes = np.random.randint(0, 1000, 1000)", "min_run_count": 2, "name": "benchmarks.TimeRaggedArraySuite.time_concatenate_np", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "bd98e8505273fda895774a98c58c38ae6fcd8a616f3eeec42994bbafd0d2792f", "warmup_time": -1}, "benchmarks.TimeRaggedArraySuite.time_concatenate_nps": {"code": "class TimeRaggedArraySuite:\n    def time_concatenate_nps(self):\n        np.concatenate((self.ragged_array, self.ragged_array2), axis=0)\n\n    def setup(self):\n        np.random.seed(1)\n        self.matrix = np.random.randint(0, 1000, (1000, 1000), dtype=int)\n        self.matrix2 = np.random.randint(0, 1000, (500, 1000), dtype=int)\n        self.ragged_array = RaggedArray.from_numpy_array(self.matrix)\n        self.ragged_array2 = RaggedArray.from_numpy_array(self.matrix2)\n        self.indexes = np.random.randint(0, 1000, 1000)", "min_run_count": 2, "name": "benchmarks.TimeRaggedArraySuite.time_concatenate_nps", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "5a5ebc48c63becf21f8bf7618f188fa9d8886da4c24f7411bba4fc875a2935b7", "warmup_time": -1}, "benchmarks.TimeRaggedArraySuite.time_np_col_sum": {"code": "class TimeRaggedArraySuite:\n    def time_np_col_sum(self):\n        self.matrix.sum(axis=0)\n\n    def setup(self):\n        np.random.seed(1)\n        self.matrix = np.random.randint(0, 1000, (1000, 1000), dtype=int)\n        self.matrix2 = np.random.randint(0, 1000, (500, 1000), dtype=int)\n        self.ragged_array = RaggedArray.from_numpy_array(self.matrix)\n        self.ragged_array2 = RaggedArray.from_numpy_array(self.matrix2)\n        self.indexes = np.random.randint(0, 1000, 1000)", "min_run_count": 2, "name": "benchmarks.TimeRaggedArraySuite.time_np_col_sum", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "d0afbeec277a654247fb92c394327fed6693610de43e0b0ca0cc0f86663aede7", "warmup_time": -1}, "benchmarks.TimeRaggedArraySuite.time_np_getitem_col": {"code": "class TimeRaggedArraySuite:\n    def time_np_getitem_col(self):\n        return self.matrix[:, 1:-1].flatten()\n\n    def setup(self):\n        np.random.seed(1)\n        self.matrix = np.random.randint(0, 1000, (1000, 1000), dtype=int)\n        self.matrix2 = np.random.randint(0, 1000, (500, 1000), dtype=int)\n        self.ragged_array = RaggedArray.from_numpy_array(self.matrix)\n        self.ragged_array2 = RaggedArray.from_numpy_array(self.matrix2)\n        self.indexes = np.random.randint(0, 1000, 1000)", "min_run_count": 2, "name": "benchmarks.TimeRaggedArraySuite.time_np_getitem_col", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "8f543f2f0dae2b069342a1c25284741af1211d2837cb3cc514edea2409b659bf", "warmup_time": -1}, "benchmarks.TimeRaggedArraySuite.time_np_getitem_row": {"code": "class TimeRaggedArraySuite:\n    def time_np_getitem_row(self):\n        return self.matrix[self.indexes].flatten()\n\n    def setup(self):\n        np.random.seed(1)\n        self.matrix = np.random.randint(0, 1000, (1000, 1000), dtype=int)\n        self.matrix2 = np.random.randint(0, 1000, (500, 1000), dtype=int)\n        self.ragged_array = RaggedArray.from_numpy_array(self.matrix)\n        self.ragged_array2 = RaggedArray.from_numpy_array(self.matrix2)\n        self.indexes = np.random.randint(0, 1000, 1000)", "min_run_count": 2, "name": "benchmarks.TimeRaggedArraySuite.time_np_getitem_row", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "74317d7b11232f58cb529bdc283af9e72b3982ebfe5b8ec160963309d140d58e", "warmup_time": -1}, "benchmarks.TimeRaggedArraySuite.time_np_row_mean": {"code": "class TimeRaggedArraySuite:\n    def time_np_row_mean(self):\n        self.matrix.mean(axis=-1)\n\n    def setup(self):\n        np.random.seed(1)\n        self.matrix = np.random.randint(0, 1000, (1000, 1000), dtype=int)\n        self.matrix2 = np.random.randint(0, 1000, (500, 1000), dtype=int)\n        self.ragged_array = RaggedArray.from_numpy_array(self.matrix)\n        self.ragged_array2 = RaggedArray.from_numpy_array(self.matrix2)\n        self.indexes = np.random.randint(0, 1000, 1000)", "min_run_count": 2, "name": "benchmarks.TimeRaggedArraySuite.time_np_row_mean", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "340a7028ff54e4e147bfbc203a0ad55b96ee84b3ab32a96f33a177ad1ce2fc7d", "warmup_time": -1}, "benchmarks.TimeRaggedArraySuite.time_np_row_std": {"code": "class TimeRaggedArraySuite:\n    def time_np_row_std(self):\n        self.matrix.std(axis=-1)\n\n    def setup(self):\n        np.random.seed(1)\n        self.matrix = np.random.randint(0, 1000, (1000, 1000), dtype=int)\n        self.matrix2 = np.random.randint(0, 1000, (500, 1000), dtype=int)\n        self.ragged_array = RaggedArray.from_numpy_array(self.matrix)\n        self.ragged_array2 = RaggedArray.from_numpy_array(self.matrix2)\n        self.indexes = np.random.randint(0, 1000, 1000)", "min_run_count": 2, "name": "benchmarks.TimeRaggedArraySuite.time_np_row_std", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "7214da8fee20525ac5ad60e26835d9f7c006318adcb0c3d4c3b2071f3dcd9674", "warmup_time": -1}, "benchmarks.TimeRaggedArraySuite.time_np_row_sum": {"code": "class TimeRaggedArraySuite:\n    def time_np_row_sum(self):\n        self.matrix.sum(axis=-1)\n\n    def setup(self):\n        np.random.seed(1)\n        self.matrix = np.random.randint(0, 1000, (1000, 1000), dtype=int)\n        self.matrix2 = np.random.randint(0, 1000, (500, 1000), dtype=int)\n        self.ragged_array = RaggedArray.from_numpy_array(self.matrix)\n        self.ragged_array2 = RaggedArray.from_numpy_array(self.matrix2)\n        self.indexes = np.random.randint(0, 1000, 1000)", "min_run_count": 2, "name": "benchmarks.TimeRaggedArraySuite.time_np_row_sum", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "e61a31a404ab2dac9c85351a17c4fe46baca9ecb83614c32e2e1a16f0a176669", "warmup_time": -1}, "benchmarks.TimeRaggedArraySuite.time_np_square": {"code": "class TimeRaggedArraySuite:\n    def time_np_square(self):\n        self.matrix ** 2\n\n    def setup(self):\n        np.random.seed(1)\n        self.matrix = np.random.randint(0, 1000, (1000, 1000), dtype=int)\n        self.matrix2 = np.random.randint(0, 1000, (500, 1000), dtype=int)\n        self.ragged_array = RaggedArray.from_numpy_array(self.matrix)\n        self.ragged_array2 = RaggedArray.from_numpy_array(self.matrix2)\n        self.indexes = np.random.randint(0, 1000, 1000)", "min_run_count": 2, "name": "benchmarks.TimeRaggedArraySuite.time_np_square", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "382665632eeb8458c739ac0a4a1cfa890b4a4dfebab5102f3eab75927c6cf0c7", "warmup_time": -1}, "benchmarks.TimeRaggedArraySuite.time_nps_col_sum": {"code": "class TimeRaggedArraySuite:\n    def time_nps_col_sum(self):\n        self.ragged_array.sum(axis=0)\n\n    def setup(self):\n        np.random.seed(1)\n        self.matrix = np.random.randint(0, 1000, (1000, 1000), dtype=int)\n        self.matrix2 = np.random.randint(0, 1000, (500, 1000), dtype=int)\n        self.ragged_array = RaggedArray.from_numpy_array(self.matrix)\n        self.ragged_array2 = RaggedArray.from_numpy_array(self.matrix2)\n        self.indexes = np.random.randint(0, 1000, 1000)", "min_run_count": 2, "name": "benchmarks.TimeRaggedArraySuite.time_nps_col_sum", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "cef01915b8564c59b341e63ce0a20a2579774586f3b27bd11315c5a82a086376", "warmup_time": -1}, "benchmarks.TimeRaggedArraySuite.time_nps_getitem_col": {"code": "class TimeRaggedArraySuite:\n    def time_nps_getitem_col(self):\n        return self.ragged_array[:, 1:-1 ].ravel()\n\n    def setup(self):\n        np.random.seed(1)\n        self.matrix = np.random.randint(0, 1000, (1000, 1000), dtype=int)\n        self.matrix2 = np.random.randint(0, 1000, (500, 1000), dtype=int)\n        self.ragged_array = RaggedArray.from_numpy_array(self.matrix)\n        self.ragged_array2 = RaggedArray.from_numpy_array(self.matrix2)\n        self.indexes = np.random.randint(0, 1000, 1000)", "min_run_count": 2, "name": "benchmarks.TimeRaggedArraySuite.time_nps_getitem_col", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "3d315c61f7649fee20ee68364f9abd3da7aa5cf842b6cd3b4719c6301a017b7a", "warmup_time": -1}, "benchmarks.TimeRaggedArraySuite.time_nps_getitem_row": {"code": "class TimeRaggedArraySuite:\n    def time_nps_getitem_row(self):\n        return self.ragged_array[self.indexes].ravel()\n\n    def setup(self):\n        np.random.seed(1)\n        self.matrix = np.random.randint(0, 1000, (1000, 1000), dtype=int)\n        self.matrix2 = np.random.randint(0, 1000, (500, 1000), dtype=int)\n        self.ragged_array = RaggedArray.from_numpy_array(self.matrix)\n        self.ragged_array2 = RaggedArray.from_numpy_array(self.matrix2)\n        self.indexes = np.random.randint(0, 1000, 1000)", "min_run_count": 2, "name": "benchmarks.TimeRaggedArraySuite.time_nps_getitem_row", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "01f31e60316d8c17e4ab186b1d7bfb8488ff51dc95b672b3d0611668a01828ad", "warmup_time": -1}, "benchmarks.TimeRaggedArraySuite.time_nps_row_mean": {"code": "class TimeRaggedArraySuite:\n    def time_nps_row_mean(self):\n        self.ragged_array.mean(axis=-1)\n\n    def setup(self):\n        np.random.seed(1)\n        self.matrix = np.random.randint(0, 1000, (1000, 1000), dtype=int)\n        self.matrix2 = np.random.randint(0, 1000, (500, 1000), dtype=int)\n        self.ragged_array = RaggedArray.from_numpy_array(self.matrix)\n        self.ragged_array2 = RaggedArray.from_numpy_array(self.matrix2)\n        self.indexes = np.random.randint(0, 1000, 1000)", "min_run_count": 2, "name": "benchmarks.TimeRaggedArraySuite.time_nps_row_mean", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "773a681678944253e592496f8ca6392993c0a7a44fbb80159d743197612b2ffb", "warmup_time": -1}, "benchmarks.TimeRaggedArraySuite.time_nps_row_std": {"code": "class TimeRaggedArraySuite:\n    def time_nps_row_std(self):\n        self.ragged_array.std(axis=-1)\n\n    def setup(self):\n        np.random.seed(1)\n        self.matrix = np.random.randint(0, 1000, (1000, 1000), dtype=int)\n        self.matrix2 = np.random.randint(0, 1000, (500, 1000), dtype=int)\n        self.ragged_array = RaggedArray.from_numpy_array(self.matrix)\n        self.ragged_array2 = RaggedArray.from_numpy_array(self.matrix2)\n        self.indexes = np.random.randint(0, 1000, 1000)", "min_run_count": 2, "name": "benchmarks.TimeRaggedArraySuite.time_nps_row_std", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "e4b3980bdab9f0feef9723617759a7770e826422455edf0b55b85f1137211da9", "warmup_time": -1}, "benchmarks.TimeRaggedArraySuite.time_nps_row_sum": {"code": "class TimeRaggedArraySuite:\n    def time_nps_row_sum(self):\n        self.ragged_array.sum(axis=-1)\n\n    def setup(self):\n        np.random.seed(1)\n        self.matrix = np.random.randint(0, 1000, (1000, 1000), dtype=int)\n        self.matrix2 = np.random.randint(0, 1000, (500, 1000), dtype=int)\n        self.ragged_array = RaggedArray.from_numpy_array(self.matrix)\n        self.ragged_array2 = RaggedArray.from_numpy_array(self.matrix2)\n        self.indexes = np.random.randint(0, 1000, 1000)", "min_run_count": 2, "name": "benchmarks.TimeRaggedArraySuite.time_nps_row_sum", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "c911a24036bed60996dc4eb4b5c4d1f8b7cde05f1a9c92ba6082a8568e594a48", "warmup_time": -1}, "benchmarks.TimeRaggedArraySuite.time_nps_square": {"code": "class TimeRaggedArraySuite:\n    def time_nps_square(self):\n        self.ragged_array ** 2\n\n    def setup(self):\n        np.random.seed(1)\n        self.matrix = np.random.randint(0, 1000, (1000, 1000), dtype=int)\n        self.matrix2 = np.random.randint(0, 1000, (500, 1000), dtype=int)\n        self.ragged_array = RaggedArray.from_numpy_array(self.matrix)\n        self.ragged_array2 = RaggedArray.from_numpy_array(self.matrix2)\n        self.indexes = np.random.randint(0, 1000, 1000)", "min_run_count": 2, "name": "benchmarks.TimeRaggedArraySuite.time_nps_square", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "84df683c4b45532e03d3b34e7f398e9a8ea2e52022bb27d9c95a507acb5f43be", "warmup_time": -1}}, "machines": {"github_actions": {"machine": "github_actions", "version": 1}}, "tags": {"0.2.0": 222, "v0.2.4": 342, "v0.2.5": 350, "v0.2.6": 354, "v0.2.7": 364, "v0.2.8": 381, "v0.2.9": 424, "v0.2.10": 430, "v0.2.11": 480, "v0.2.12": 488, "v0.2.13": 498, "v0.2.14": 501, "v0.2.15": 509, "v0.2.16": 514, "v0.2.17": 518, "v0.2.18": 526}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}